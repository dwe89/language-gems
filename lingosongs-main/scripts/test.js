const { createClient } = require('@supabase/supabase-js'); require('dotenv').config({ path: '.env.local' }); const supabase = createClient(process.env.NEXT_PUBLIC_SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY); const generatePronunciation = (videoId) => { const examples = [{ phrase_text: 'Example phrase one', start_time: 10.5, end_time: 12.8 }]; return examples.map(item => ({ ...item, video_id: videoId })); }; const generateCulturalNotes = (videoId) => { const examples = [{ note_text: 'Example note', reference_text: 'Reference', timestamp: 15.5 }]; return examples.map(item => ({ ...item, video_id: videoId })); }; const generateSentenceScrambles = (videoId) => { const examples = [{ original_sentence: 'Example sentence' }]; return examples.map(item => ({ ...item, video_id: videoId })); }; async function populateData() { try { const { data: videos } = await supabase.from('videos').select('id'); console.log('Found videos:', videos.length); for (const video of videos) { console.log('Processing video:', video.id); const results = await Promise.allSettled([supabase.from('pronunciation_practice').insert(generatePronunciation(video.id)), supabase.from('cultural_notes').insert(generateCulturalNotes(video.id)), supabase.from('sentence_scrambles').insert(generateSentenceScrambles(video.id))]); results.forEach((r, i) => { const table = ['pronunciation_practice', 'cultural_notes', 'sentence_scrambles'][i]; console.log(table + ':', r.status === 'fulfilled' ? (r.value.error ? 'Error: ' + r.value.error.message : 'Success') : 'Failed: ' + r.reason); }); } } catch (err) { console.error('Error:', err); } } populateData();
